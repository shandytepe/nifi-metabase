services:
    # configuration manager for NiFi
    zookeeper:
        hostname: zookeeper
        container_name: zookeeper_container
        image: 'bitnami/zookeeper:3.7.0'
        restart: on-failure
        environment:
            - ALLOW_ANONYMOUS_LOGIN=yes
        networks:
            - my_network

    # data extraction, transformation and load service
    nifi:
        hostname: nifi
        container_name: nifi_container
        image: 'apache/nifi:1.14.0'  # latest image as of 2021-11-09.
        restart: on-failure
        ports:
            - '8091:8080'
        environment:
            - NIFI_WEB_HTTP_PORT=8080
            - NIFI_WEB_HTTP_HOST=nifi
            - NIFI_CLUSTER_IS_NODE=true
            - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
            - NIFI_ZK_CONNECT_STRING=zookeeper:2181
            - NIFI_ELECTION_MAX_WAIT=30 sec
            - NIFI_SENSITIVE_PROPS_KEY='12345678901234567890A'
            - NIFI_JVM_HEAP_INIT=2g
            - NIFI_JVM_HEAP_MAX=2g
        healthcheck:
            test: "${DOCKER_HEALTHCHECK_TEST:-curl localhost:8091/nifi/}"
            interval: "60s"
            timeout: "3s"
            start_period: "5s"
            retries: 5
        volumes:
            - ./nifi/database_repository:/opt/nifi/nifi-current/database_repository
            - ./nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
            - ./nifi/content_repository:/opt/nifi/nifi-current/content_repository
            - ./nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
            - ./nifi/state:/opt/nifi/nifi-current/state
            - ./nifi/logs:/opt/nifi/nifi-current/logs
            - ./nifi/data:/opt/nifi/nifi-current/data
            - ./nifi/drivers:/opt/nifi/nifi-current/drivers
            - ./nifi/scripts:/opt/nifi/nifi-current/scripts
            - ./nifi/conf:/opt/nifi/nifi-current/conf
        networks:
            - my_network

    # database source
    postgres_chinook_source:
        hostname: postgres_chinook_source
        container_name: postgres_chinook_container
        image: 'postgres:latest'
        restart: on-failure
        environment:
            - POSTGRES_DB=chinook_db
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=cobapassword
        volumes:
            - ./chinook_data_source/init.sql:/docker-entrypoint-initdb.d/init.sql
        ports:
            - 5438:5432
        networks:
            - my_network

    # database postgres warehouse
    postgres_chinook_dwh:
        hostname: postgres_chinook_dwh
        container_name: postgres_chinook_dwh_container
        image: 'postgres:latest'
        restart: on-failure
        environment:
            - POSTGRES_DB=chinook_dwh
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=cobapassword
        volumes:
            - ./chinook_data_warehouse/init.sql:/docker-entrypoint-initdb.d/init.sql
        ports:
            - 5439:5432
        networks:
            - my_network

     # database source for exercise
    postgres_minishop_source:
        hostname: postgres_minishop_source
        container_name: postgres_minishop_container
        image: 'postgres:latest'
        restart: on-failure
        environment:
            - POSTGRES_DB=minishop_src
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=cobapassword
        volumes:
            - ./minishop_data_source/init.sql:/docker-entrypoint-initdb.d/init.sql
        ports:
            - 5440:5432
        networks:
            - my_network

    # data warehouse for exercise
    postgres_minishop_dwh:
        hostname: postgres_minishop_dwh
        container_name: postgres_minishop_dwh_container
        image: 'postgres:latest'
        restart: on-failure
        environment:
            - POSTGRES_DB=minishop_dwh
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=cobapassword
        volumes:
            - ./minishop_data_warehouse/init.sql:/docker-entrypoint-initdb.d/init.sql
        ports:
            - 5441:5432
        networks:
            - my_network

    # visualization tools
    metabase:
        hostname: metabase
        container_name: metabase_container
        image: 'metabase/metabase:latest'
        restart: on-failure
        ports:
            - 3000:3000
        healthcheck:
            test: curl --fail -I http://localhost:3000/api/health || exit 1
            interval: "15s"
            timeout: "5s"
            retries: 5
        networks:
            - my_network

networks:
  my_network:
    driver: bridge